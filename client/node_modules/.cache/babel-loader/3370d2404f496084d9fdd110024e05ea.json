{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u043E\\u043B\\u0435\\u0433\\\\Desktop\\\\iTechArt_\\u0421\\u0442\\u0430\\u0436\\u0438\\u0440\\u043E\\u0432\\u043A\\u0430\\\\songbird\\\\songbird\\\\src\\\\components\\\\signIn\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport firebase from \"firebase/compat\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { TextField } from \"@material-ui/core\";\nimport CustomButton from \"../customButton\";\nimport { auth } from \"../../firebase/utils\";\nimport \"./styles.scss\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { setIsUserSignIn } from \"../../redux/user/actions\";\nimport { selectIsUserSignIn } from \"../../redux/user/selectors\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SignIn = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n  const isUserSignIn = useSelector(selectIsUserSignIn);\n  const validationSchema = yup.object({\n    email: yup.string().email(\"Введите корректный адрес эл. почты\").required(\"Пожалуйста, заполните данное поле\"),\n    password: yup.string().required(\"Пожалуйста, заполните данное поле\")\n  });\n  const formik = useFormik({\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    onSubmit: async values => {\n      console.log(isUserSignIn);\n      dispatch(setIsUserSignIn(!isUserSignIn));\n\n      try {\n        setLoading(true);\n        console.log(isUserSignIn);\n        await auth.signInWithEmailAndPassword(values.email, values.password);\n        toast.success(\"Авторизация прошла успешно\", {\n          className: \"toast-success\",\n          draggable: false,\n          position: toast.POSITION.BOTTOM_CENTER\n        });\n      } catch {\n        toast.error(\"Не удалось войти\", {\n          className: \"toast-error\",\n          draggable: false,\n          position: toast.POSITION.BOTTOM_CENTER\n        });\n      }\n\n      setLoading(false);\n    },\n    validationSchema: validationSchema\n  });\n\n  const loginWithGoogle = async () => {\n    console.log(isUserSignIn);\n    dispatch(setIsUserSignIn(true));\n    console.log(isUserSignIn);\n    await auth.signInWithPopup(new firebase.auth.GoogleAuthProvider());\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sign-in\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: \"\\u0423 \\u043C\\u0435\\u043D\\u044F \\u0443\\u0436\\u0435 \\u0435\\u0441\\u0442\\u044C \\u0430\\u043A\\u043A\\u0430\\u0443\\u043D\\u0442\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u0412\\u043E\\u0439\\u0434\\u0438\\u0442\\u0435 \\u0432 \\u0441\\u0438\\u0441\\u0442\\u0435\\u043C\\u0443, \\u0443\\u043A\\u0430\\u0437\\u0430\\u0432 \\u0441\\u0432\\u043E\\u0439 \\u0430\\u0434\\u0440\\u0435\\u0441 \\u044D\\u043B\\u0435\\u043A\\u0442\\u0440\\u043E\\u043D\\u043D\\u043E\\u0439 \\u043F\\u043E\\u0447\\u0442\\u044B \\u0438 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formik.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        id: \"emailSignIn\",\n        name: \"email\",\n        label: \"Email\",\n        value: formik.values.email,\n        onChange: formik.handleChange,\n        error: formik.touched.email && Boolean(formik.errors.email),\n        helperText: formik.touched.email && formik.errors.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"passwordSignIn\",\n        name: \"password\",\n        type: \"password\",\n        label: \"Password\",\n        value: formik.values.password,\n        onChange: formik.handleChange,\n        error: formik.touched.password && Boolean(formik.errors.password),\n        helperText: formik.touched.password && formik.errors.password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(CustomButton, {\n          disabled: loading,\n          type: \"submit\",\n          children: \"Sign in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n          type: \"submit\",\n          onClick: loginWithGoogle,\n          isGoogleSignIn: true,\n          children: \"Sign in with Google\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SignIn, \"xQii6Fcxj5/pXKgP2cNCJBKe5qY=\", false, function () {\n  return [useDispatch, useSelector, useFormik];\n});\n\n_c = SignIn;\nexport default SignIn;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignIn\");","map":{"version":3,"sources":["C:/Users/олег/Desktop/iTechArt_Стажировка/songbird/songbird/src/components/signIn/index.jsx"],"names":["React","useState","firebase","useDispatch","useSelector","toast","ToastContainer","useFormik","yup","TextField","CustomButton","auth","setIsUserSignIn","selectIsUserSignIn","SignIn","loading","setLoading","dispatch","isUserSignIn","validationSchema","object","email","string","required","password","formik","initialValues","onSubmit","values","console","log","signInWithEmailAndPassword","success","className","draggable","position","POSITION","BOTTOM_CENTER","error","loginWithGoogle","signInWithPopup","GoogleAuthProvider","handleSubmit","handleChange","touched","Boolean","errors"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport firebase from \"firebase/compat\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { TextField } from \"@material-ui/core\";\n\nimport CustomButton from \"../customButton\";\nimport { auth } from \"../../firebase/utils\";\n\nimport \"./styles.scss\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { setIsUserSignIn } from \"../../redux/user/actions\";\nimport { selectIsUserSignIn } from \"../../redux/user/selectors\";\n\nconst SignIn = () => {\n  const [loading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n  const isUserSignIn = useSelector(selectIsUserSignIn);\n\n  const validationSchema = yup.object({\n    email: yup\n      .string()\n      .email(\"Введите корректный адрес эл. почты\")\n      .required(\"Пожалуйста, заполните данное поле\"),\n    password: yup.string().required(\"Пожалуйста, заполните данное поле\"),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      email: \"\",\n      password: \"\",\n    },\n    onSubmit: async (values) => {\n      console.log(isUserSignIn);\n      dispatch(setIsUserSignIn(!isUserSignIn));\n      try {\n        setLoading(true);\n        console.log(isUserSignIn);\n        await auth.signInWithEmailAndPassword(values.email, values.password);\n        toast.success(\"Авторизация прошла успешно\", {\n          className: \"toast-success\",\n          draggable: false,\n          position: toast.POSITION.BOTTOM_CENTER,\n        });\n      } catch {\n        toast.error(\"Не удалось войти\", {\n          className: \"toast-error\",\n          draggable: false,\n          position: toast.POSITION.BOTTOM_CENTER,\n        });\n      }\n\n      setLoading(false);\n    },\n    validationSchema: validationSchema,\n  });\n\n  const loginWithGoogle = async () => {\n    console.log(isUserSignIn);\n    dispatch(setIsUserSignIn(true));\n    console.log(isUserSignIn);\n    await auth.signInWithPopup(new firebase.auth.GoogleAuthProvider());\n  };\n\n  return (\n    <div className=\"sign-in\">\n      <div className=\"title\">У меня уже есть аккаунт</div>\n      <div>Войдите в систему, указав свой адрес электронной почты и пароль</div>\n      <form onSubmit={formik.handleSubmit}>\n        <TextField\n          id=\"emailSignIn\"\n          name=\"email\"\n          label=\"Email\"\n          value={formik.values.email}\n          onChange={formik.handleChange}\n          error={formik.touched.email && Boolean(formik.errors.email)}\n          helperText={formik.touched.email && formik.errors.email}\n        />\n        <TextField\n          id=\"passwordSignIn\"\n          name=\"password\"\n          type=\"password\"\n          label=\"Password\"\n          value={formik.values.password}\n          onChange={formik.handleChange}\n          error={formik.touched.password && Boolean(formik.errors.password)}\n          helperText={formik.touched.password && formik.errors.password}\n        />\n        <div className=\"buttons\">\n          <CustomButton disabled={loading} type=\"submit\">\n            Sign in\n          </CustomButton>\n          <CustomButton type=\"submit\" onClick={loginWithGoogle} isGoogleSignIn>\n            Sign in with Google\n          </CustomButton>\n        </div>\n      </form>\n      <>\n        <ToastContainer />\n      </>\n    </div>\n  );\n};\n\nexport default SignIn;\n"]},"metadata":{},"sourceType":"module"}