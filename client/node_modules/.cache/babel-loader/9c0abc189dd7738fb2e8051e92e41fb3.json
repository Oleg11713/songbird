{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u043E\\u043B\\u0435\\u0433\\\\Desktop\\\\iTechArt_\\u0421\\u0442\\u0430\\u0436\\u0438\\u0440\\u043E\\u0432\\u043A\\u0430\\\\songbird\\\\songbird\\\\client\\\\src\\\\components\\\\audio\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from \"react\";\nimport Slider from \"../slider/Slider\";\nimport ControlPanel from \"../controls/ControlPanel\";\nimport Button from \"../controls/Button\";\nimport \"./styles.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AudioPlayer = _ref => {\n  _s();\n\n  let {\n    audio\n  } = _ref;\n  const PERCENTAGE = 100;\n  const AUDIO_VOLUME = 0.4;\n  const [percentage, setPercentage] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [duration, setDuration] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n  const audioRef = useRef();\n\n  const onChange = e => {\n    const audio = audioRef.current;\n    audio.currentTime = audio.duration / PERCENTAGE * e.target.value;\n    setPercentage(e.target.value);\n  };\n\n  const play = () => {\n    const audio = audioRef.current;\n    audio.volume = AUDIO_VOLUME;\n\n    if (!isPlaying) {\n      setIsPlaying(true);\n      audio.play();\n    }\n\n    if (isPlaying) {\n      setIsPlaying(false);\n      audio.pause();\n    }\n  };\n\n  const getCurrDuration = e => {\n    const percent = (e.currentTarget.currentTime / e.currentTarget.duration * PERCENTAGE).toFixed(2);\n    const time = e.currentTarget.currentTime;\n    setPercentage(+percent);\n    setCurrentTime(time.toFixed(2));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-bar\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      play: play,\n      isPlaying: isPlaying\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"audio-slider\",\n      children: [/*#__PURE__*/_jsxDEV(Slider, {\n        percentage: percentage,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        ref: audioRef,\n        onTimeUpdate: getCurrDuration,\n        onLoadedData: e => {\n          setDuration(e.currentTarget.duration.toFixed(2));\n        },\n        src: audio\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ControlPanel, {\n        play: play,\n        isPlaying: isPlaying,\n        duration: duration,\n        currentTime: currentTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AudioPlayer, \"hWzC6cXACk0W7vgDeg1g+KdNPG4=\");\n\n_c = AudioPlayer;\nexport default AudioPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioPlayer\");","map":{"version":3,"sources":["C:/Users/олег/Desktop/iTechArt_Стажировка/songbird/songbird/client/src/components/audio/index.jsx"],"names":["React","useRef","useState","Slider","ControlPanel","Button","AudioPlayer","audio","PERCENTAGE","AUDIO_VOLUME","percentage","setPercentage","isPlaying","setIsPlaying","duration","setDuration","currentTime","setCurrentTime","audioRef","onChange","e","current","target","value","play","volume","pause","getCurrDuration","percent","currentTarget","toFixed","time"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\n\nimport Slider from \"../slider/Slider\";\nimport ControlPanel from \"../controls/ControlPanel\";\nimport Button from \"../controls/Button\";\n\nimport \"./styles.scss\";\n\nconst AudioPlayer = ({ audio }) => {\n  const PERCENTAGE = 100;\n  const AUDIO_VOLUME = 0.4;\n\n  const [percentage, setPercentage] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [duration, setDuration] = useState(0);\n  const [currentTime, setCurrentTime] = useState(0);\n\n  const audioRef = useRef();\n\n  const onChange = (e) => {\n    const audio = audioRef.current;\n    audio.currentTime = (audio.duration / PERCENTAGE) * e.target.value;\n    setPercentage(e.target.value);\n  };\n\n  const play = () => {\n    const audio = audioRef.current;\n    audio.volume = AUDIO_VOLUME;\n\n    if (!isPlaying) {\n      setIsPlaying(true);\n      audio.play();\n    }\n\n    if (isPlaying) {\n      setIsPlaying(false);\n      audio.pause();\n    }\n  };\n\n  const getCurrDuration = (e) => {\n    const percent = (\n      (e.currentTarget.currentTime / e.currentTarget.duration) *\n      PERCENTAGE\n    ).toFixed(2);\n    const time = e.currentTarget.currentTime;\n\n    setPercentage(+percent);\n    setCurrentTime(time.toFixed(2));\n  };\n\n  return (\n    <div className=\"audio-bar\">\n      <Button play={play} isPlaying={isPlaying} />\n      <div className=\"audio-slider\">\n        <Slider percentage={percentage} onChange={onChange} />\n        <audio\n          ref={audioRef}\n          onTimeUpdate={getCurrDuration}\n          onLoadedData={(e) => {\n            setDuration(e.currentTarget.duration.toFixed(2));\n          }}\n          src={audio}\n        />\n        <ControlPanel\n          play={play}\n          isPlaying={isPlaying}\n          duration={duration}\n          currentTime={currentTime}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default AudioPlayer;\n"]},"metadata":{},"sourceType":"module"}